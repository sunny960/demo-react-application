import { fireEvent, render, screen, waitFor } from '@testing-library/react';
import { getSearchList } from 'services/api/tms/getSearchList';
import { getTmsPanelConfig } from 'services/api/tms/getTmsPanelConfig';
import { getTmsPanelLayout } from 'services/api/tms/getTmsPanelLayout';
import TaskDefinitionFilterComponent from '../TaskDefinitionFilterComponent';

const getTmsPanelLayoutMockRes = {
  taskDefinitionName: {
    defaultValue: null,
    fieldType: 'text',
    groupId: null,
    editable: true,
    mandatory: false,
    label: 'Task Definition Name',
    parentKey: null,
    regex: '^[a-zA-Z0-9_. ]+$',
    section: 'primary_details',
    addFieldAllowed: false,
    filterAllowed: true,
    preRequisiteField: null,
    preRequisiteFieldValue: 'TRUE',
    sequence: 1,
    errorMessage: null,
  },
  teams: {
    defaultValue: null,
    fieldType: 'multiselect',
    groupId: null,
    editable: true,
    mandatory: false,
    label: 'Team',
    parentKey: null,
    regex: null,
    section: 'primary_details',
    addFieldAllowed: false,
    filterAllowed: true,
    preRequisiteField: null,
    preRequisiteFieldValue: 'TRUE',
    sequence: 1,
    errorMessage: null,
  },
  inputSuccessCriteria: {
    defaultValue: null,
    fieldType: 'multiselect',
    groupId: null,
    editable: true,
    mandatory: false,
    label: 'Input Success Criteria',
    parentKey: null,
    regex: null,
    section: 'primary_details',
    addFieldAllowed: false,
    filterAllowed: true,
    preRequisiteField: null,
    preRequisiteFieldValue: null,
    sequence: 1,
    errorMessage: null,
  },
  source: {
    defaultValue: null,
    fieldType: 'multiselect',
    groupId: null,
    editable: true,
    mandatory: false,
    label: 'Source',
    parentKey: null,
    regex: null,
    section: 'primary_details',
    addFieldAllowed: false,
    filterAllowed: true,
    preRequisiteField: null,
    preRequisiteFieldValue: 'TRUE',
    sequence: 1,
    errorMessage: null,
  },
  taskDefinitionId: {
    defaultValue: null,
    fieldType: 'text',
    groupId: null,
    editable: true,
    mandatory: false,
    label: 'Task Definition Id',
    parentKey: null,
    regex: '^[0-9]+$',
    section: 'primary_details',
    addFieldAllowed: false,
    filterAllowed: false,
    preRequisiteField: null,
    preRequisiteFieldValue: 'TRUE',
    sequence: 1,
    errorMessage: null,
  },
  status: {
    defaultValue: null,
    fieldType: 'multiselect',
    groupId: null,
    editable: true,
    mandatory: false,
    label: 'Status',
    parentKey: null,
    regex: null,
    section: 'primary_details',
    addFieldAllowed: false,
    filterAllowed: true,
    preRequisiteField: null,
    preRequisiteFieldValue: 'TRUE',
    sequence: 1,
    errorMessage: null,
  },
};

const getTmsPanelConfigMockRes = {
  configStaticData: {
    '': [
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
    ],
    reasonForSendToMHD: [
      'hehe',
      'pipi',
      'Major Reason',
      'Minor Reason',
      'Minor Reason',
      'Weird Reason',
      'Nonsense Reason',
      'asas',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
    ],
    teams: [
      'EDC Online Sales',
      'EDC Retail Business',
      'team50',
      'LFR',
      'Enterprise Mid-Market',
      'TEST0',
      'TEST2',
      'TEST3',
      'edc1',
      'SB QR',
      'TEST4',
      'TEST5',
      'TEST6',
      'TEST7',
      'Semi Organized - Mid Market Team',
      'Recharges-Common',
      'Care',
      'Collections Field Force',
      'Transit Common',
      'qweqwe',
      'EDC Online',
      'Offline Payments Service Team',
      'Lending Team',
      'EDC Retail Service',
      'Transport',
      'Semi-Organized',
      'Automobile123',
      'Utilities Common',
      'City Bus',
      'Food and Wellness123',
      'P',
      'tere',
      'wholesale',
      '3P-Distribution',
      'rail team',
      'Dairy',
      'EDC Retail Service Team',
      'Fastag-Issuance',
      'cxzx',
      'EDC Retail',
      'test-team7',
      'Payments Business',
      'test-team6',
      'FASTag_IOCL1234',
      'PSA Team',
      'Paytm Ad',
      'Semi-Organized Mid-Market',
      '3P - Distribution',
      'Organised',
      'Fastag-Acquiring',
      'Organized Distribution',
      'Banking-Offline',
      'Fastag Recharge',
      'Enterprise',
      'Healthcare',
      'Semi-Organised QR',
      'dd',
      'Paytm Service Partner',
      'Lending',
      'EDC Service Team',
      'Semi Organised - QR Mid Market',
      'EDC Sales',
      'Oil & Gas',
      'Payroll Team12',
      '3P TVS',
      'Automation_check',
      'Metro',
      'testing868767',
      'tempuser',
      'Fastag',
      'NULL',
      'Offline-Business Services',
      'testTeam',
      'Credit-mate',
      'EDC Sales Operations',
      'qaTestFilter1',
      'Parking & Tolls',
      'EDC Retail PAM',
      'Offline Common',
      'Fastag123',
      'food12345',
      'sales priority',
      'Semi Organized Offline Channel',
      'Soundbox',
      'Lending-Merchant',
      'Online-TASC',
      'common',
      'Transit Offline-Railway',
      'demoteam',
      'Semi Organised Offline Channel',
      'team1',
      'team8',
      'Team Mumbai',
      'huhu',
      'Semi Organized',
      'EDC Retail Service Team1',
      'Payroll Team',
      'Unorganized Offline Channel',
      'TESTING',
      'demoteam12',
      'EDC Retail KAM',
      'test panel for new changes',
      'EDC EMI Channel',
      'qwe',
    ],
    reasons_for_closure: [
      'Testing',
      'Merchant not interested',
      'new reason check ',
      'new task',
      'newtask',
      '123',
      'SLA',
      'sal',
    ],
    reasons_for_reschedule: [
      'Merchant was not found',
      'Testing',
      'add new',
      '123',
      'sal',
    ],
    reasonForScheduling: [
      'Merchant was not found',
      'asas',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
    ],
    reasonForClosure: [
      'testing',
      'asas',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
    ],
    source: [
      'FSM',
      'hello',
      'gaga',
      'Normal',
      'AMS major',
      'AMS minor',
      'asas',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
    ],
    reasons_for_send_to_mhd: [
      'pipi',
      'Major Reason',
      'new',
      '123',
      'SLA',
      'sal',
    ],
    reasonForReschedule: [
      'Merchant not interested',
      'asas',
      'asas',
      'asas',
      '1',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
    ],
    skills: [
      'fse1skill1',
      'adminPanelTestSkill',
      'Sales FSE',
      'Automation Test 0.5367087232392023',
      'Soundbox Test Delete 11',
      'FSE Skill',
      'Soundbox Test Delete 12',
      'Soundbox Test 4 Re-Test',
      'Soundbox Test Delete 13',
      'EDC Test 11',
      'SB Service',
      'TL Skill',
      'EDC Test',
      'Soundbox Revisit',
      'Settlement Service',
      'TL/ASM',
      'xyz',
      'Automation Test 0.4803877843970411',
      'Target Revisit',
      'QR',
      'Soundbox Test 12',
      'Soundbox Test 151',
      'Soundbox Test 11',
      'KAM/KML',
      'TL/ASM/SH/CH',
      'Automation Test 0.7775607642462622',
      'Soundbox Test Delete 1',
      'Automation Test 0.0852352493635673',
      'SB Sales',
      'Service FSE',
      'Soundbox Test 8 Re-Test',
      'EDC Replacement',
      'Soundbox Test 6',
      'Soundbox Test 7',
      'Soundbox Test 8',
      'Soundbox TC008 Re-Test',
      'Soundbox Test 9',
      'Soundbox Test 2',
      'Soundbox Test 3',
      'Loan Sales & Service',
      'Soundbox Test 4',
      'Soundbox Test 5',
      'Soundbox Test 7 Re-Test',
    ],
    sourceSkill: ['Business Skill', 'Segment Skill'],
    inputSuccessCriteria: [
      'GL Revisit',
      '',
      'Winback',
      'QR Code',
      'Training Issue',
      'HGTNGZKLFMM',
      'JLEBNHIDQZX',
      'Loan: 3Lac +',
      'ABDMGMBNJNC',
      'EDC Return',
      'Revisit',
      'Inactive/Churn',
      'SIM Replacement',
      'Upgrade to 100K',
      'Card Soundbox Unbind',
      'FBRNLQFKXLS',
      'VETCPUENJKN',
      'VXOQLPEZINS',
      'SB Asset Replacement',
      'EDC SIM Replacement',
      'Upgrade to 5L/UL',
      'JIMZCBKXTFW',
      'RUKPBPASJWJ',
      'Merchant Dissatisfied',
      'SB Upgrade',
      'Device Deactivation',
      'Soundbox Inactive',
      'DDMMUGFLGLH',
      'XYZ123',
      'EDC Welcome Visit',
      'EDC Courier Channel Deployment',
      'TBNQETEQCHR',
      'KZWTPVZDCNY',
      'Loan Fence Sitter',
      'Lockdown Winback',
      'Tap N Pay Sim Replacement',
      'ICICI',
      'CPV Compliance',
      'ZZQKHERQQAY',
      'DIY EDC Order',
      'SB Battery Replacement',
      'UHSHWANROGQ',
      'EE - Battery Replacement',
      'IYFETPDXUXF',
      'SB Charger Replacement',
      'Whitelisted Loan Visit',
      'EDC_address_update',
      'XIMZNNVNKZQ',
      'Inactive Data',
      'LZCUYOMHNKG',
      'XEVXESPLFZN',
      'NPDEHYFYVON',
      'Sound box',
      'JXWJAMTDLUH',
      'SB SIM Replacement',
      'RBEVUDSEUOC',
      'PNBKIZQMEGP',
      'BSBUIMDWVMH',
      'Whitelisted Merchants',
      'Retail Shared Lead Deployment',
      'EDC Battery Replacement',
      'DKQBJKOOEXJ',
      'SB M0 Inactive',
      'RJYETFENYEO',
      'NOOPJLDMDYR',
      'PZHVRSCUJAD',
      'High Impact Churn',
      '    Merchant Revival ',
      'TL Revisit',
      'FSE Revisit',
      'WBPEVESYCOF',
      'EDC Retail Channel Deployment',
      'PTIYCWCEAFW',
      'RNPFYTTTXMR',
      'SKHNRJHUJTT',
      'BFLZYVOEZTZ',
      'GNFQITZHOTW',
      'EDC Asset Replacement',
      'KVJRKNPCLIV',
      'Chargeback Doc collection',
      'QDDEYDKHTYP',
      'EE - Sim Replacement',
      'CPV',
      'Soundbox Deactivation',
      'Deployment',
      'EDC Deactivation',
      'Postpaid',
      'Device Replacement',
      'LAZNNEFOOJV',
      'NLTHAKDUTNW',
      'Test31',
      'EE - Device Deactivation',
      'Business Lending',
      'Soundbox Replacement',
      'EE - Device Replacement',
      'SB M2 Inactive',
      'Welcome Revisit',
      'UIADFWEAAOI',
      'LNMLTFKIJMX',
      'WOHRYYKBHIR',
      'KAM PORTFOLIO',
      'EDC Charger Replacement',
      'HDFC',
      'NBLIOWYNYDB',
      'LMDCNWDUQHQ',
      'TEUVAEOGLNN',
      'testTag',
      'Bank CP Device Deployment',
      'YROBNSFXVET',
      'Risk Doc collection',
      'Welcome Visit',
      'Card Soundbox Battery Replacement',
      'CPV Risk',
      'RentalDefer',
      'Card Soundbox Replacement',
      'TJLTBDDQNDT',
      'Offer',
      'EDC Banking Channel Deployment',
      'DIY MCO Onboarding',
      'Cust ID Onboarding',
      'FJBWNPPVNDY',
      'EDC Upgrade',
      'EE - Charger Replacement',
      'FYIBZCMLKJA',
      'NNZZSTNAQES',
      'test_tag',
      'MLIUOWUENHE',
      'Card Soundbox Charger Replacement',
      'DIOHPXSKNEQ',
      'Profile_Update_PAN',
      'EDC Enterprise Deployment3',
      'VSIYYXIKKPK',
      'EDC Enterprise Deployment2',
      'EDC Enterprise Deployment1',
      'Profile_Update_Aadhaar',
      'Soundbox Return',
      'EWTNBGPGHNX',
      'RXZRSTONFFK',
      'Chargeback',
      'LHTPPNHVZUN',
      'Wallet',
      'PNMRGKQNBLC',
      'Card Soundbox Sim Replacement',
      'KAM LENDING',
      'testTag12345',
      'HBMXNVZHRLJ',
      'Rental Recovery',
      'QEQHCNSNWDX',
      'Plan Upgrade2',
      'HIXUEKNNQYB',
      'IPDMGUDXBML',
      'EDC Replacement',
      'Loan: 2Lac - 3Lac',
      'Plan Upgrade',
      'SB M1 inactive',
      'HOT LEADS',
      'EDC Enterprise Deployment',
      'JLUTYRTVRUR',
      'NAGKENJGZUL',
      'ICICI Device Deployment',
      'EMI Activation',
      'Loan: 1Lac - 2Lac',
    ],
    inventoryCheckApplicable: [
      'sb_all_inventory',
      'edc_all_inventory',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
      'Testing',
    ],
    tags_require_dsn: [
      'GL Revisit',
      '',
      'Winback',
      'QR Code',
      'Training Issue',
      'HGTNGZKLFMM',
      'JLEBNHIDQZX',
      'Loan: 3Lac +',
      'ABDMGMBNJNC',
      'EDC Return',
      'Revisit',
      'Inactive/Churn',
      'SIM Replacement',
      'Upgrade to 100K',
      'Card Soundbox Unbind',
      'FBRNLQFKXLS',
      'VETCPUENJKN',
      'VXOQLPEZINS',
      'SB Asset Replacement',
      'EDC SIM Replacement',
      'Upgrade to 5L/UL',
      'JIMZCBKXTFW',
      'RUKPBPASJWJ',
      'Merchant Dissatisfied',
      'SB Upgrade',
      'Device Deactivation',
      'Soundbox Inactive',
      'DDMMUGFLGLH',
      'XYZ123',
      'EDC Welcome Visit',
      'EDC Courier Channel Deployment',
      'TBNQETEQCHR',
      'KZWTPVZDCNY',
      'Loan Fence Sitter',
      'Lockdown Winback',
      'Tap N Pay Sim Replacement',
      'ICICI',
      'CPV Compliance',
      'ZZQKHERQQAY',
      'DIY EDC Order',
      'SB Battery Replacement',
      'UHSHWANROGQ',
      'EE - Battery Replacement',
      'IYFETPDXUXF',
      'SB Charger Replacement',
      'Whitelisted Loan Visit',
      'EDC_address_update',
      'XIMZNNVNKZQ',
      'Inactive Data',
      'LZCUYOMHNKG',
      'XEVXESPLFZN',
      'NPDEHYFYVON',
      'Sound box',
      'JXWJAMTDLUH',
      'SB SIM Replacement',
      'RBEVUDSEUOC',
      'PNBKIZQMEGP',
      'BSBUIMDWVMH',
      'Whitelisted Merchants',
      'Retail Shared Lead Deployment',
      'EDC Battery Replacement',
      'DKQBJKOOEXJ',
      'SB M0 Inactive',
      'RJYETFENYEO',
      'NOOPJLDMDYR',
      'PZHVRSCUJAD',
      'High Impact Churn',
      '    Merchant Revival ',
      'TL Revisit',
      'FSE Revisit',
      'WBPEVESYCOF',
      'EDC Retail Channel Deployment',
      'PTIYCWCEAFW',
      'RNPFYTTTXMR',
      'SKHNRJHUJTT',
      'BFLZYVOEZTZ',
      'GNFQITZHOTW',
      'EDC Asset Replacement',
      'KVJRKNPCLIV',
      'Chargeback Doc collection',
      'QDDEYDKHTYP',
      'EE - Sim Replacement',
      'CPV',
      'Soundbox Deactivation',
      'Deployment',
      'EDC Deactivation',
      'Postpaid',
      'Device Replacement',
      'LAZNNEFOOJV',
      'NLTHAKDUTNW',
      'Test31',
      'EE - Device Deactivation',
      'Business Lending',
      'Soundbox Replacement',
      'EE - Device Replacement',
      'SB M2 Inactive',
      'Welcome Revisit',
      'UIADFWEAAOI',
      'LNMLTFKIJMX',
      'WOHRYYKBHIR',
      'KAM PORTFOLIO',
      'EDC Charger Replacement',
      'HDFC',
      'NBLIOWYNYDB',
      'LMDCNWDUQHQ',
      'TEUVAEOGLNN',
      'testTag',
      'Bank CP Device Deployment',
      'YROBNSFXVET',
      'Risk Doc collection',
      'Welcome Visit',
      'Card Soundbox Battery Replacement',
      'CPV Risk',
      'RentalDefer',
      'Card Soundbox Replacement',
      'TJLTBDDQNDT',
      'Offer',
      'EDC Banking Channel Deployment',
      'DIY MCO Onboarding',
      'Cust ID Onboarding',
      'FJBWNPPVNDY',
      'EDC Upgrade',
      'EE - Charger Replacement',
      'FYIBZCMLKJA',
      'NNZZSTNAQES',
      'test_tag',
      'MLIUOWUENHE',
      'Card Soundbox Charger Replacement',
      'DIOHPXSKNEQ',
      'Profile_Update_PAN',
      'EDC Enterprise Deployment3',
      'VSIYYXIKKPK',
      'EDC Enterprise Deployment2',
      'EDC Enterprise Deployment1',
      'Profile_Update_Aadhaar',
      'Soundbox Return',
      'EWTNBGPGHNX',
      'RXZRSTONFFK',
      'Chargeback',
      'LHTPPNHVZUN',
      'Wallet',
      'PNMRGKQNBLC',
      'Card Soundbox Sim Replacement',
      'KAM LENDING',
      'testTag12345',
      'HBMXNVZHRLJ',
      'Rental Recovery',
      'QEQHCNSNWDX',
      'Plan Upgrade2',
      'HIXUEKNNQYB',
      'IPDMGUDXBML',
      'EDC Replacement',
      'Loan: 2Lac - 3Lac',
      'Plan Upgrade',
      'SB M1 inactive',
      'HOT LEADS',
      'EDC Enterprise Deployment',
      'JLUTYRTVRUR',
      'NAGKENJGZUL',
      'ICICI Device Deployment',
      'EMI Activation',
      'Loan: 1Lac - 2Lac',
    ],
    status: [
      'DRAFT',
      'ACTIVE',
      'PENDING',
      'INACTIVE',
      'DEACTIVATION_REQUESTED',
      'REJECTED',
      'Testing',
      'Testing',
    ],
  },
  sections: [
    {
      key: 'primary_details',
      heading: 'General Details',
      subHeading: 'Choose the General Details Below',
      sequence: 1,
    },
    {
      key: 'fse_details',
      heading: 'FSE Specific Details',
      subHeading: 'Choose the subset of FSEs for which the task is eligible',
      sequence: 2,
    },
    {
      key: 'allocate_details',
      heading: 'Allocate/Assign Details',
      subHeading: 'Choose to whom all the task is allocated or assigned',
      sequence: 3,
    },
  ],
};
const getSearchListMockRes = {
  taskDefinitions: [
    {
      taskDefinitionId: 325,
      taskDefinitionName: 'Test_.',
      source: 'FSM',
      teams: ['EDC Online Sales'],
      creator: '1107195733',
      createdAt: '2023-12-07 09:59:10.0',
      approver: '1700007197',
      approvedAt: '2023-12-07 13:27:57.913',
      status: 'DEACTIVATION_REQUESTED',
      actions: ['view', 'search'],
      inputSuccessCriteria: ['QR Code'],
      sla: 240,
      incentivePoints: 50,
      incentiveValue: 50,
    },
    {
      taskDefinitionId: 326,
      taskDefinitionName: 'test',
      source: 'FSM',
      teams: ['EDC Online Sales'],
      creator: '1107195733',
      createdAt: '2023-12-07 12:19:47.0',
      approvedAt: '2023-12-07 12:19:46.911',
      status: 'DRAFT',
      actions: ['edit', 'submit', 'view', 'search'],
      inputSuccessCriteria: ['GL Revisit'],
      sla: 3,
      incentivePoints: 3,
      incentiveValue: 3,
    },
    {
      taskDefinitionId: 320,
      taskDefinitionName: 'TxnDroppers_HighPriority',
      source: 'FSM',
      teams: ['Semi-Organised QR'],
      creator: '1107195733',
      createdAt: '2023-12-06 11:55:57.0',
      approvedAt: '2023-12-06 14:15:07.791',
      status: 'PENDING',
      actions: ['view', 'search'],
      inputSuccessCriteria: ['Revisit', 'Qr Code'],
      sla: 72,
      incentivePoints: 150,
      incentiveValue: 150,
    },
    {
      taskDefinitionId: 323,
      taskDefinitionName: 'vvvv',
      source: 'FSM',
      teams: ['EDC Online Sales'],
      creator: '1001647902',
      createdAt: '2023-12-06 14:09:30.0',
      approver: '1700007197',
      approvedAt: '2023-12-06 14:12:37.448',
      status: 'ACTIVE',
      actions: ['clone', 'delete', 'view', 'search'],
      inputSuccessCriteria: ['GL Revisit'],
      sla: 5,
      incentivePoints: 5,
      incentiveValue: 5,
    },
    {
      taskDefinitionId: 324,
      taskDefinitionName: 'Testingclose',
      source: 'FSM',
      teams: ['EDC Online Sales', 'EDC Retail Business'],
      creator: '1107195733',
      createdAt: '2023-12-06 14:10:53.0',
      approvedAt: '2023-12-06 14:12:20.993',
      status: 'REJECTED',
      actions: ['view', 'search'],
      inputSuccessCriteria: ['QR Code', 'Revisit'],
      sla: 2,
      incentivePoints: 2,
      incentiveValue: 2,
    },
    {
      taskDefinitionId: 321,
      taskDefinitionName: 'Testing12023-12-06 13:21:37.5',
      source: 'FSM',
      teams: ['SB QR'],
      creator: '1107195733',
      createdAt: '2023-12-06 13:21:38.0',
      approvedAt: '2023-12-06 14:00:12.638',
      status: 'PENDING',
      actions: ['view', 'search'],
      inputSuccessCriteria: ['QR Code'],
      sla: 1,
      incentivePoints: 4,
      incentiveValue: 1000,
    },
    {
      taskDefinitionId: 322,
      taskDefinitionName: 'aaaaa',
      source: 'FSM',
      teams: ['EDC Retail Business'],
      creator: '1001647902',
      createdAt: '2023-12-06 13:30:38.0',
      approver: '1700007197',
      approvedAt: '2023-12-06 13:47:14.509',
      status: 'ACTIVE',
      actions: ['clone', 'delete', 'view', 'search'],
      inputSuccessCriteria: ['GL Revisit'],
      sla: 5,
      incentivePoints: 5,
      incentiveValue: 5,
    },
    {
      taskDefinitionId: 315,
      taskDefinitionName: 'Test562023-12-06 10:47:42.362',
      source: 'FSM',
      teams: ['EDC Online Sales', 'EDC Retail Business'],
      creator: '1107195733',
      createdAt: '2023-12-06 10:47:42.0',
      approvedAt: '2023-12-06 10:47:42.363',
      status: 'DRAFT',
      actions: ['edit', 'submit', 'view', 'search'],
      inputSuccessCriteria: ['GL Revisit'],
      sla: 34,
      incentivePoints: 22,
      incentiveValue: 33,
    },
    {
      taskDefinitionId: 314,
      taskDefinitionName: 'Test12023-12-06 10:46:38.556',
      source: 'hello',
      teams: ['EDC Online Sales'],
      creator: '1107195733',
      createdAt: '2023-12-06 10:46:39.0',
      approvedAt: '2023-12-06 10:46:38.564',
      status: 'DRAFT',
      actions: ['edit', 'submit', 'view', 'search'],
      inputSuccessCriteria: ['GL Revisit', 'QR Code'],
      sla: 23,
      incentivePoints: 23,
      incentiveValue: 12,
    },
    {
      taskDefinitionId: 233,
      taskDefinitionName: 'Test56',
      source: 'FSM',
      teams: ['EDC Retail Business', 'EDC Online Sales'],
      creator: '1107195733',
      createdAt: '2023-12-01 18:06:10.0',
      approver: '1700007197',
      approvedAt: '2023-12-05 19:15:43.226',
      status: 'ACTIVE',
      actions: ['clone', 'delete', 'view', 'search'],
      inputSuccessCriteria: ['GL Revisit'],
      sla: 34,
      incentivePoints: 22,
      incentiveValue: 33,
    },
  ],
  searchCount: 42,
};

jest.mock('services/api/tms/getTmsPanelConfig');
jest.mock('services/api/tms/getSearchList');

jest.mock('services/api/tms/getTmsPanelLayout', () => ({
  getTmsPanelLayout: jest.fn(),
}));

describe('TaskDefinitionFilterComponent', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('calls getTaskLayout on initial render', () => {
    (getTmsPanelLayout as jest.Mock).mockResolvedValue(
      getTmsPanelLayoutMockRes,
    );
    const mockFilterApplyHandler = jest.fn();
    render(
      <TaskDefinitionFilterComponent
        tmsPanelConfig={undefined}
        filterApplyHandler={mockFilterApplyHandler}
        filterResetHandler={jest.fn()}
        getTmsPanelConfigData={jest.fn()}
      />,
    );
    expect(getTmsPanelLayout).toHaveBeenCalled();
  });

  it('changes the "Filter By" select field value correctly', async () => {
    (getTmsPanelLayout as jest.Mock).mockResolvedValue(
      getTmsPanelLayoutMockRes,
    );
    const mockFilterApplyHandler = jest.fn();

    render(
      <TaskDefinitionFilterComponent
        tmsPanelConfig={undefined}
        filterApplyHandler={mockFilterApplyHandler}
        filterResetHandler={jest.fn()}
        getTmsPanelConfigData={jest.fn()}
      />,
    );
    const selectField = screen.getByTestId('filterSelectBox');
    fireEvent.click(selectField);
    const option = screen.getByText('Task Id');
    fireEvent.click(option);

    expect(screen.getByText('Task Id')).toBeInTheDocument();
  });

  it('changes the "Search" input field value correctly', async () => {
    (getTmsPanelLayout as jest.Mock).mockResolvedValue(
      getTmsPanelLayoutMockRes,
    );
    const mockFilterApplyHandler = jest.fn();

    render(
      <TaskDefinitionFilterComponent
        tmsPanelConfig={undefined}
        filterApplyHandler={mockFilterApplyHandler}
        filterResetHandler={jest.fn()}
        getTmsPanelConfigData={jest.fn()}
      />,
    );
    const selectField = screen.getByTestId('filterSelectBox');
    fireEvent.click(selectField);
    const option = screen.getByText('Task Id');
    fireEvent.click(option);

    const inputField =
      screen.getByTestId('filterByInputBox').children[0].children[0]
        .children[0];
    fireEvent.change(inputField, { target: { value: '323' } });
    await waitFor(() => {
      expect(inputField).toHaveValue('323');
    });
  });

  it('renders the QuestionAnswerManagment component for each key in taskLayout', async () => {
    (getTmsPanelLayout as jest.Mock).mockResolvedValue(
      getTmsPanelLayoutMockRes,
    );
    (getTmsPanelConfig as jest.Mock).mockResolvedValue(
      getTmsPanelConfigMockRes,
    );
    const filterApplyHandler = jest.fn();

    render(
      <TaskDefinitionFilterComponent
        tmsPanelConfig={undefined}
        filterResetHandler={jest.fn()}
        getTmsPanelConfigData={jest.fn()}
        filterApplyHandler={filterApplyHandler}
      />,
    );

    await waitFor(() => {
      expect(getTmsPanelLayout).toBeCalled();
    });
    const sourceFilter = screen.getByText('Source');
    fireEvent.click(sourceFilter);
    const selectAll = await screen.getByTestId('selectAllCheckBox');
    fireEvent.click(selectAll);
    const doneBtn = await screen.findByTestId('doneButton');
    fireEvent.click(doneBtn);
    await waitFor(() => {
      expect(filterApplyHandler).toHaveBeenCalled();
    });
  });

  it('shows the element when a question is answered', async () => {
    (getTmsPanelLayout as jest.Mock).mockResolvedValue(
      getTmsPanelLayoutMockRes,
    );
    (getSearchList as jest.Mock).mockResolvedValue(getSearchListMockRes);
    const filterApplyHandler = jest.fn();
    render(
      <TaskDefinitionFilterComponent
        filterApplyHandler={filterApplyHandler}
        tmsPanelConfig={undefined}
        filterResetHandler={jest.fn()}
        getTmsPanelConfigData={jest.fn()}
      />,
    );
    await waitFor(() => {
      expect(getTmsPanelLayout).toBeCalled();
    });
    const defNameInput = await screen.getByTestId('taskDefinitionName')
      .children[0].children[0].children[0];

    fireEvent.change(defNameInput, { target: { value: 'test' } });

    await waitFor(() => {
      expect(defNameInput).toHaveValue('test');
    });
  });

  it('filterApplyHandler is called', async () => {
    (getTmsPanelLayout as jest.Mock).mockImplementation(
      (type = 'create_screen') => {
        return Promise.resolve(getTmsPanelLayoutMockRes);
      },
    );
    (getSearchList as jest.Mock).mockResolvedValue(getSearchListMockRes);
    const filterApplyHandler = jest.fn();
    render(
      <TaskDefinitionFilterComponent
        filterApplyHandler={filterApplyHandler}
        tmsPanelConfig={undefined}
        filterResetHandler={jest.fn()}
        getTmsPanelConfigData={jest.fn()}
      />,
    );

    const selectField = screen.getByTestId('filterSelectBox');
    fireEvent.click(selectField);
    const option = screen.getByText('Task Name');
    fireEvent.click(option);

    const inputField =
      screen.getByTestId('filterByInputBox').children[0].children[0]
        .children[0];
    fireEvent.change(inputField, { target: { value: '323' } });

    fireEvent.click(selectField);
    const option2 = screen.getByText('Task Id');
    fireEvent.click(option2);

    await waitFor(() => {
      expect(filterApplyHandler).toHaveBeenCalled();
    }),
      { timeout: 1000 };
  });
});
